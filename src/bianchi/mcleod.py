from sympy import Matrix, Rational, sqrt


BianchiMValues = [1, 2, 3, 5, 6, 7, 10, 11, 13, 14, 15, 17, 19, 21, 30, 33, 39]


ConvertedMcLeod = {
    1: [
        Matrix([[0, 0, -1, 0]]),
        Matrix([[1, 0, 1, 0]]),
        Matrix([[0, 0, 0, -1]]),
        Matrix([[1, 0, 0, 1]]),
        Matrix([[-1, 1, 0, 0]]),
    ],
    2: [
        Matrix([[0, 0, -1, 0]]),
        Matrix([[1, 0, 1, 0]]),
        Matrix([[0, 0, 0, -1]]),
        Matrix([[sqrt(2), 0, 0, 1]]),
        Matrix([[-1, 1, 0, 0]]),
    ],
    3: [
        Matrix([[0, 0, -1, 0]]),
        Matrix([[1, 0, Rational(1, 2), sqrt(3) / 2]]),
        Matrix([[0, 0, Rational(1, 2), -(sqrt(3) / 2)]]),
        Matrix([[-1, 1, 0, 0]]),
    ],
    5: [
        Matrix([[0, 0, -1, 0]]),
        Matrix([[1, 0, 1, 0]]),
        Matrix([[0, 0, 0, -1]]),
        Matrix([[sqrt(5), 0, 0, 1]]),
        Matrix([[-1, 1, 0, 0]]),
        Matrix([[sqrt(2), sqrt(2), 1 / sqrt(2), sqrt(Rational(5, 2))]]),
    ],
    6: [
        Matrix([[0, 0, -1, 0]]),
        Matrix([[1, 0, 1, 0]]),
        Matrix([[0, 0, 0, -1]]),
        Matrix([[sqrt(6), 0, 0, 1]]),
        Matrix([[-1, 1, 0, 0]]),
        Matrix([[sqrt(2), sqrt(2), 0, sqrt(3)]]),
    ],
    7: [
        Matrix([[0, 0, -1, 0]]),
        Matrix([[1, 0, 1, 0]]),
        Matrix([[0, 0, 0, -1]]),
        Matrix([[sqrt(7), 0, 0, 1]]),
        Matrix([[-1, 1, 0, 0]]),
        Matrix([[1, 1, Rational(1, 2), sqrt(7) / 2]]),
    ],
    10: [
        Matrix([[0, 0, -1, 0]]),
        Matrix([[1, 0, 1, 0]]),
        Matrix([[0, 0, 0, -1]]),
        Matrix([[sqrt(10), 0, 0, 1]]),
        Matrix([[-1, 1, 0, 0]]),
        Matrix([[2 * sqrt(2), sqrt(2), 0, sqrt(5)]]),
        Matrix([[8, 6, 3, 2 * sqrt(10)]]),
        Matrix([[3 * sqrt(10), 3 * sqrt(10), sqrt(10), 9]]),
        Matrix([[4 * sqrt(10), 4 * sqrt(10), 2 * sqrt(10), 11]]),
    ],
    11: [
        Matrix([[0, 0, -1, 0]]),
        Matrix([[1, 0, 1, 0]]),
        Matrix([[0, 0, 0, -1]]),
        Matrix([[sqrt(11), 0, 0, 1]]),
        Matrix([[-1, 1, 0, 0]]),
        Matrix([[2, 1, Rational(1, 2), sqrt(11) / 2]]),
    ],
    13: [
        Matrix([[0, 0, -1, 0]]),
        Matrix([[1, 0, 1, 0]]),
        Matrix([[0, 0, 0, -1]]),
        Matrix([[sqrt(13), 0, 0, 1]]),
        Matrix([[-1, 1, 0, 0]]),
        Matrix([[3 * sqrt(2), sqrt(2), 1 / sqrt(2), sqrt(Rational(13, 2))]]),
        Matrix([[4, 3, 0, sqrt(13)]]),
        Matrix([[4, 4, 2, sqrt(13)]]),
        Matrix([[4 * sqrt(13), 3 * sqrt(13), sqrt(13), 12]]),
        Matrix([[4 * sqrt(13), 4 * sqrt(13), sqrt(13), 14]]),
    ],
    14: [
        Matrix([[0, 0, -1, 0]]),
        Matrix([[1, 0, 1, 0]]),
        Matrix([[0, 0, 0, -1]]),
        Matrix([[sqrt(14), 0, 0, -1]]),
        Matrix([[-1, 1, 0, 0]]),
        Matrix([[3 * sqrt(2), sqrt(2), 0, sqrt(7)]]),
        Matrix([[sqrt(7), sqrt(7), 0, 2 * sqrt(2)]]),
        Matrix([[2 * sqrt(2), 2 * sqrt(2), sqrt(2), sqrt(7)]]),
        Matrix([[4 * sqrt(7), 2 * sqrt(7), sqrt(7), 5 * sqrt(2)]]),
    ],
    15: [
        Matrix([[0, 0, -1, 0]]),
        Matrix([[1, 0, 1, 0]]),
        Matrix([[0, 0, 0, -1]]),
        Matrix([[sqrt(15), 0, 0, 1]]),
        Matrix([[-1, 1, 0, 0]]),
        Matrix([[3, 1, Rational(1, 2), sqrt(15) / 2]]),
        Matrix([[sqrt(15), sqrt(15), sqrt(15) / 2, Rational(7, 2)]]),
        Matrix([[sqrt(15), sqrt(15), 0, 4]]),
    ],
    17: [
        Matrix([[0, 0, -1, 0]]),
        Matrix([[1, 0, 1, 0]]),
        Matrix([[0, 0, 0, -1]]),
        Matrix([[sqrt(17), 0, 0, 1]]),
        Matrix([[-1, 1, 0, 0]]),
        Matrix([[4 * sqrt(2), sqrt(2), 1 / sqrt(2), sqrt(Rational(17, 2))]]),
        Matrix([[2 * sqrt(2), 2 * sqrt(2), 1 / sqrt(2), sqrt(Rational(17, 2))]]),
        Matrix(
            [
                [
                    2 * sqrt(34),
                    sqrt(34),
                    sqrt(Rational(17, 2)),
                    Rational(11, 1) / sqrt(2),
                ]
            ]
        ),
        Matrix([[19, 8, 0, 3 * sqrt(17)]]),
        Matrix([[17, 9, 1, 3 * sqrt(17)]]),
        Matrix([[4 * sqrt(34), 2 * sqrt(34), sqrt(Rational(17, 2)), 23 / sqrt(2)]]),
        Matrix([[5 * sqrt(17), 3 * sqrt(17), 0, 16]]),
        Matrix([[12 * sqrt(17), 6 * sqrt(17), 0, 35]]),
    ],
    19: [
        Matrix([[0, 0, -1, 0]]),
        Matrix([[1, 0, 1, 0]]),
        Matrix([[0, 0, 0, -1]]),
        Matrix([[sqrt(19), 0, 0, 1]]),
        Matrix([[-1, 1, 0, 0]]),
        Matrix([[4, 1, Rational(1, 2), sqrt(19) / 2]]),
        Matrix([[2, 2, Rational(1, 2), sqrt(19) / 2]]),
    ],
    21: [
        Matrix([[0, 0, -1, 0]]),
        Matrix([[1, 0, 1, 0]]),
        Matrix([[0, 0, 0, -1]]),
        Matrix([[sqrt(21), 0, 0, 1]]),
        Matrix([[-1, 1, 0, 0]]),
        Matrix([[5 * sqrt(2), sqrt(2), 1 / sqrt(2), sqrt(Rational(21, 2))]]),
        Matrix([[2 * sqrt(3), sqrt(3), 0, sqrt(7)]]),
        Matrix([[6, 4, 2, sqrt(21)]]),
        Matrix([[2 * sqrt(21), 2 * sqrt(21), sqrt(21), 8]]),
        Matrix([[7 * sqrt(2), 7 * sqrt(2), 3 / sqrt(2), 3 * sqrt(Rational(21, 2))]]),
        Matrix([[3 * sqrt(21), 3 * sqrt(21), sqrt(21), 13]]),
    ],
    30: [
        Matrix([[0, 0, -1, 0]]),
        Matrix([[1, 0, 1, 0]]),
        Matrix([[0, 0, 0, -1]]),
        Matrix([[sqrt(30), 0, 0, 1]]),
        Matrix([[-1, 1, 0, 0]]),
        Matrix([[7 * sqrt(2), sqrt(2), 0, sqrt(15)]]),
        Matrix([[3 * sqrt(3), sqrt(3), 0, sqrt(10)]]),
        Matrix([[sqrt(5), sqrt(5), 0, sqrt(6)]]),
        Matrix([[4 * sqrt(2), 2 * sqrt(2), sqrt(2), sqrt(15)]]),
        Matrix([[2 * sqrt(3), 2 * sqrt(3), sqrt(3), sqrt(10)]]),
        Matrix([[10 * sqrt(5), 2 * sqrt(5), sqrt(5), 4 * sqrt(6)]]),
    ],
    33: [
        Matrix([[0, 0, -1, 0]]),
        Matrix([[1, 0, 1, 0]]),
        Matrix([[0, 0, 0, 1]]),
        Matrix([[sqrt(33), 0, 0, 1]]),
        Matrix([[-1, 1, 0, 0]]),
        Matrix([[8 * sqrt(2), sqrt(2), 1 / sqrt(2), sqrt(Rational(33, 2))]]),
        Matrix(
            [
                [
                    sqrt(6),
                    sqrt(6),
                    sqrt(Rational(3, 2)),
                    sqrt(Rational(11, 2)),
                ]
            ]
        ),
        Matrix([[4 * sqrt(2), 2 * sqrt(2), 1 / sqrt(2), sqrt(Rational(33, 2))]]),
        Matrix([[11, 3, 1, sqrt(33)]]),
        Matrix([[sqrt(11), sqrt(11), 0, 2 * sqrt(3)]]),
        Matrix([[3 * sqrt(33), sqrt(33), 0, 10]]),
        Matrix([[11 * sqrt(11), 2 * sqrt(11), 0, 9 * sqrt(3)]]),
        Matrix(
            [
                [
                    15 * sqrt(6),
                    3 * sqrt(6),
                    sqrt(Rational(3, 2)),
                    7 * sqrt(Rational(11, 2)),
                ]
            ]
        ),
        Matrix([[37, 8, 0, 3 * sqrt(33)]]),
        Matrix([[8 * sqrt(33), 2 * sqrt(33), 0, 23]]),
    ],
    39: [
        Matrix([[0, 0, -1, 0]]),
        Matrix([[1, 0, 1, 0]]),
        Matrix([[0, 0, 0, -1]]),
        Matrix([[sqrt(39), 0, 0, 1]]),
        Matrix([[-1, 1, 0, 0]]),
        Matrix([[9, 1, Rational(1, 2), sqrt(39) / 2]]),
        Matrix([[sqrt(3), sqrt(3), sqrt(3) / 2, sqrt(13) / 2]]),
        Matrix([[4 * sqrt(3), sqrt(3), 0, sqrt(13)]]),
        Matrix([[2 * sqrt(13), sqrt(13), 0, 3 * sqrt(3)]]),
        Matrix([[3 * sqrt(13), sqrt(13), sqrt(13) / 2, (7 * sqrt(3)) / 2]]),
    ],
}


IsolatedBianchiClusters = {
    1: [[1], [3]],
    2: [[1], [3]],
    3: [],
    5: [[3], [4], [3, 4]],
    6: [[1], [3], [4], [3, 4]],
    7: [[3], [4], [3, 4]],
    10: [
        [1],
        [3],
        [4],
        [7],
        [8],
        [9],
        [1, 7],
        [1, 8],
        [1, 9],
        [3, 4],
        [3, 7],
        [3, 8],
        [3, 9],
        [4, 7],
        [4, 8],
        [4, 9],
        [8, 9],
        [1, 8, 9],
        [3, 4, 7],
        [3, 4, 8],
        [3, 4, 9],
        [3, 8, 9],
        [4, 8, 9],
        [3, 4, 8, 9],
    ],
    11: [[3], [4], [3, 4]],
    13: [
        [3],
        [4],
        [9],
        [10],
        [3, 4],
        [3, 9],
        [3, 10],
        [4, 9],
        [4, 10],
        [9, 10],
        [3, 4, 9],
        [3, 4, 10],
        [3, 9, 10],
        [4, 9, 10],
        [3, 4, 9, 10],
    ],
    14: [
        [1],
        [3],
        [4],
        [7],
        [8],
        [9],
        [1, 8],
        [1, 9],
        [3, 4],
        [3, 7],
        [3, 8],
        [3, 9],
        [4, 7],
        [4, 8],
        [4, 9],
        [7, 9],
        [3, 4, 7],
        [3, 4, 8],
        [3, 4, 9],
        [3, 7, 9],
        [4, 7, 9],
        [3, 4, 7, 9],
    ],
    15: [
        [3],
        [4],
        [7],
        [8],
        [3, 4],
        [3, 7],
        [3, 8],
        [4, 7],
        [4, 8],
        [7, 8],
        [3, 4, 7],
        [3, 4, 8],
        [3, 7, 8],
        [4, 7, 8],
        [3, 4, 7, 8],
    ],
    17: [
        [3],
        [4],
        [8],
        [11],
        [12],
        [13],
        [3, 4],
        [3, 8],
        [3, 11],
        [3, 12],
        [3, 13],
        [4, 8],
        [4, 11],
        [4, 12],
        [4, 13],
        [8, 11],
        [8, 12],
        [8, 13],
        [11, 12],
        [11, 13],
        [12, 13],
        [3, 4, 8],
        [3, 4, 11],
        [3, 4, 12],
        [3, 4, 13],
        [3, 8, 11],
        [3, 8, 12],
        [3, 8, 13],
        [3, 11, 12],
        [3, 11, 13],
        [3, 12, 13],
        [4, 8, 11],
        [4, 8, 12],
        [4, 8, 13],
        [4, 11, 12],
        [4, 11, 13],
        [4, 12, 13],
        [8, 11, 12],
        [8, 11, 13],
        [8, 12, 13],
        [11, 12, 13],
        [3, 4, 8, 11],
        [3, 4, 8, 12],
        [3, 4, 8, 13],
        [3, 4, 11, 12],
        [3, 4, 11, 13],
        [3, 4, 12, 13],
        [3, 8, 11, 12],
        [3, 8, 11, 13],
        [3, 8, 12, 13],
        [3, 11, 12, 13],
        [4, 8, 11, 12],
        [4, 8, 11, 13],
        [4, 8, 12, 13],
        [4, 11, 12, 13],
        [8, 11, 12, 13],
        [3, 4, 8, 11, 12],
        [3, 4, 8, 11, 13],
        [3, 4, 8, 12, 13],
        [3, 4, 11, 12, 13],
        [3, 8, 11, 12, 13],
        [4, 8, 11, 12, 13],
        [3, 4, 8, 11, 12, 13],
    ],
    19: [[3], [4], [3, 4]],
    21: [
        [3],
        [4],
        [9],
        [11],
        [3, 4],
        [3, 9],
        [3, 11],
        [4, 9],
        [4, 11],
        [9, 11],
        [3, 4, 9],
        [3, 4, 11],
        [3, 9, 11],
        [4, 9, 11],
        [3, 4, 9, 11],
    ],
    30: [
        [1],
        [3],
        [4],
        [8],
        [9],
        [10],
        [11],
        [1, 9],
        [1, 10],
        [1, 11],
        [3, 4],
        [3, 8],
        [3, 9],
        [3, 10],
        [3, 11],
        [4, 8],
        [4, 9],
        [4, 10],
        [4, 11],
        [8, 11],
        [9, 11],
        [10, 11],
        [1, 9, 11],
        [1, 10, 11],
        [3, 4, 8],
        [3, 4, 9],
        [3, 4, 10],
        [3, 4, 11],
        [3, 8, 11],
        [3, 9, 11],
        [3, 10, 11],
        [4, 8, 11],
        [4, 9, 11],
        [4, 10, 11],
        [3, 4, 8, 11],
        [3, 4, 9, 11],
        [3, 4, 10, 11],
    ],
    33: [
        [3],
        [4],
        [7],
        [10],
        [11],
        [12],
        [13],
        [15],
        [3, 4],
        [3, 7],
        [3, 10],
        [3, 11],
        [3, 12],
        [3, 13],
        [3, 15],
        [4, 7],
        [4, 10],
        [4, 11],
        [4, 12],
        [4, 13],
        [4, 15],
        [7, 11],
        [7, 12],
        [7, 13],
        [7, 15],
        [10, 11],
        [10, 12],
        [10, 13],
        [10, 15],
        [11, 12],
        [11, 13],
        [11, 15],
        [12, 15],
        [13, 15],
        [3, 4, 7],
        [3, 4, 10],
        [3, 4, 11],
        [3, 4, 12],
        [3, 4, 13],
        [3, 4, 15],
        [3, 7, 11],
        [3, 7, 12],
        [3, 7, 13],
        [3, 7, 15],
        [3, 10, 11],
        [3, 10, 12],
        [3, 10, 13],
        [3, 10, 15],
        [3, 11, 12],
        [3, 11, 13],
        [3, 11, 15],
        [3, 12, 15],
        [3, 13, 15],
        [4, 7, 11],
        [4, 7, 12],
        [4, 7, 13],
        [4, 7, 15],
        [4, 10, 11],
        [4, 10, 12],
        [4, 10, 13],
        [4, 10, 15],
        [4, 11, 12],
        [4, 11, 13],
        [4, 11, 15],
        [4, 12, 15],
        [4, 13, 15],
        [7, 11, 12],
        [7, 11, 13],
        [7, 11, 15],
        [7, 12, 15],
        [7, 13, 15],
        [10, 11, 12],
        [10, 11, 13],
        [10, 11, 15],
        [10, 12, 15],
        [10, 13, 15],
        [11, 12, 15],
        [11, 13, 15],
        [3, 4, 7, 11],
        [3, 4, 7, 12],
        [3, 4, 7, 13],
        [3, 4, 7, 15],
        [3, 4, 10, 11],
        [3, 4, 10, 12],
        [3, 4, 10, 13],
        [3, 4, 10, 15],
        [3, 4, 11, 12],
        [3, 4, 11, 13],
        [3, 4, 11, 15],
        [3, 4, 12, 15],
        [3, 4, 13, 15],
        [3, 7, 11, 12],
        [3, 7, 11, 13],
        [3, 7, 11, 15],
        [3, 7, 12, 15],
        [3, 7, 13, 15],
        [3, 10, 11, 12],
        [3, 10, 11, 13],
        [3, 10, 11, 15],
        [3, 10, 12, 15],
        [3, 10, 13, 15],
        [3, 11, 12, 15],
        [3, 11, 13, 15],
        [4, 7, 11, 12],
        [4, 7, 11, 13],
        [4, 7, 11, 15],
        [4, 7, 12, 15],
        [4, 7, 13, 15],
        [4, 10, 11, 12],
        [4, 10, 11, 13],
        [4, 10, 11, 15],
        [4, 10, 12, 15],
        [4, 10, 13, 15],
        [4, 11, 12, 15],
        [4, 11, 13, 15],
        [7, 11, 12, 15],
        [7, 11, 13, 15],
        [10, 11, 12, 15],
        [10, 11, 13, 15],
        [3, 4, 7, 11, 12],
        [3, 4, 7, 11, 13],
        [3, 4, 7, 11, 15],
        [3, 4, 7, 12, 15],
        [3, 4, 7, 13, 15],
        [3, 4, 10, 11, 12, 15],
        [3, 4, 10, 11, 13, 15],
        [3, 4, 10, 11, 12, 15],
        [3, 4, 10, 11, 13, 15],
    ],
    39: [
        [3],
        [4],
        [9],
        [10],
        [3, 4],
        [3, 9],
        [3, 10],
        [4, 9],
        [4, 10],
        [9, 10],
        [3, 4, 9],
        [3, 4, 10],
        [3, 9, 10],
        [4, 9, 10],
        [3, 4, 9, 10],
    ],
}


def get_cluster_and_cocluster(m, cluster_1based_indices):
    """The data are exported from mathematica, so the indices are 1-based.
    We need to convert them to 0-based indices for Python usage.
    """
    if m not in BianchiMValues:
        raise ValueError(f"m={m} not in BianchiMValues")
    if list(sorted(cluster_1based_indices)) not in IsolatedBianchiClusters[m]:
        raise ValueError(
            f"clusters={cluster_1based_indices} not valid, valid choices are {IsolatedBianchiClusters[m]}"
        )

    cluster_0based_indices = [i - 1 for i in cluster_1based_indices]
    all_roots = ConvertedMcLeod[m]
    cluster = [all_roots[i] for i in cluster_0based_indices]
    cocluster = [r for r in all_roots if r not in cluster]
    return cluster, cocluster
